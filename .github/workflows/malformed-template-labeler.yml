name: Malformed issue template labeler

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
    
jobs:
  check-issue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v4
        timeout-minutes: 3
        with:
          script: |
            console.log(context)
            
            const config = {
              labelsToAbort: ['no-bot'],
              labelsToCheck: ['bug', 'enhancement', 'question'],
              labelsToIgnore: ['force-ignore-template'],
              labelViolation: 'template-ignored',
              templateBaseLink: context.payload.repository.html_url + '/tree/HEAD/.github/ISSUE_TEMPLATE',
              checks: [
                {
                  log: 'checklist-section exists',
                  check: issue => issue.body && issue.body.includes('### Checklist'),
                  errorMsg: 'Issue does not contain the expected checklist'
                },
                {
                  log: 'latest version is used',
                  condition: {
                    labels: ['bug']
                  },
                  check: issue => issue.body && issue.body.includes('- [x] I am using the latest version'),
                  errorMsg: 'The check that you are using the latest version is missing'
                },
                {
                  log: 'a valid version was set when the latest version is used',
                  condition: {
                    labels: ['bug']
                  },
                  check: issue => issue.body && issue.body.includes('I am using the latest version') && !issue.body.includes('I am using the latest version - x.xx.x'),
                  errorMsg: 'This bug report does not contain a valid version (x.xx.x)'
                },
                {
                  log: 'duplicates have been searched',
                  check: issue => issue.body && issue.body.includes('- [x] I checked, but didn\'t find any duplicates'),
                  errorMsg: 'The check that you have searched for duplicates is missing'
                },
                {
                  log: 'contribution guidelines have been read',
                  check: issue => issue.body && issue.body.includes('- [x] I have read the contribution guidelines'),
                  errorMsg: 'The check that you have read the contribution guidelines is missing'
                }
              ],
              commentsIdentification: {
                startToken: '<!-- Do not change! MalformedIssueTemplate identifier -->',
                userLogins: [ 'github-actions[bot]' ],
                ignoreCommentsOlderThanDays: 60
              }
            }
                                    
            const issueLabels = context.payload.issue.labels.map(i => i.name)
            const issueBody = context.payload.issue.body
            
            console.log('--- Issue Info ---')
            console.log('Labels', issueLabels)
            console.log('Body', issueBody)
            console.log('---------')
            
            // Check for immediate abort
            if (config.labelsToAbort.some(label => issueLabels.includes(label))) {
              console.log('Detected a abort label, will abort workflow');
              return
            }
            
            // Check if we got a (un)label event that does not match any of the labels which have been specified in the config
            // It would be annoying e.g. if you get a comment-notfication (from GH) for each priority-label change
            const labelEvent = (['labeled','unlabeled'].includes(context.payload.action))
            
            // When either a label in labelsToIgnore or labelsToCheck was added / removed
            let correspondingLabelEvent = false;
            if (labelEvent) {
              correspondingLabelEvent = config.labelsToCheck.includes(context.payload.label.name) || config.labelsToIgnore.includes(context.payload.label.name);
            }
            
            if (labelEvent && !correspondingLabelEvent) {
              console.log('No matching label event, will abort workflow')
              return
            }
            
            
            const validationResult = isIssueValid(issueLabels, config)
            
            console.log('*** Manage label ***')
            manageLabel(config, issueLabels, validationResult)
            
            console.log('*** Manage comments ***')
            manageComments(config, config.commentsIdentification, validationResult)
            

            function isIssueValid(issueLabels, config) {
              console.log('Checking if the issue can be ignored, specified by using the labels', config.labelsToIgnore)

              if (config.labelsToIgnore.some(label => issueLabels.includes(label))) {
                console.log('Issue has a label that it should be ignored');
                
                return { valid: true }
              }
              
              console.log('Will check for the following labels', config.labelsToCheck)

              if (!config.labelsToCheck.some(label => issueLabels.includes(label))) {
                console.log('Issue does not match any label; ignoring it');

                return { valid: true }
              }

              console.log('Issue should be processed')

              console.log('Performing checks...')
              
              let failedChecks = []

              for(const check of config.checks) {

                console.log('Checking if ' + check.log + '...')
                
                if (check.condition) {
                  console.log('Found a condition')
                  
                  if (check.condition.labels) {
                    console.log('Found a labels condition', check.condition.labels)
                    
                    if (!check.condition.labels.some(label => issueLabels.includes(label))) {
                      console.log('SKIPPING; Labels condition was not matched')
                      continue
                    }
                  }
                  
                  console.log('Conditions have been matched')
                }

                if (!check.check(context.payload.issue)) {
                  console.log('FAILED')
                  
                  failedChecks.push(check)
                } else {
                  console.log('OK')
                }

              }
              
              return { 
                valid: failedChecks.length == 0,
                failedChecks: failedChecks
              }
            }
            
            
            
            function manageLabel(config, issueLabels, validationResult) {
              if (validationResult.valid) {
                if (issueLabels.includes(config.labelViolation)) {
                  console.log('Removing label')

                  github.issues.removeLabel({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      name: config.labelViolation
                    })
                } else {
                  console.log('No label to remove')
                }

              } else {
                if (!issueLabels.includes(config.labelViolation)) {
                  console.log('Adding label')

                  github.issues.addLabels({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    labels: [ config.labelViolation ]
                  })
                } else {
                  console.log('Label already exists')
                }
              }
            }


            
            async function manageComments(config, commentsIdentificationConfig, validationResult) {
              console.log('Trying to remove the same existing comments')
              
              let since_date = new Date()
              since_date.setDate(new Date().getDate() - commentsIdentificationConfig.ignoreCommentsOlderThanDays)
              
              const comments_payload = await github.issues.listComments({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  since: since_date.toISOString()
                })
              
              console.log('Found ' + comments_payload.data.length + 'x comments')
              
              const commentsToDelete = comments_payload.data.filter(c => {
                  let matchingComment =
                    // Check if the user who commented is the expected one
                    commentsIdentificationConfig.userLogins.includes(c.user.login) &&
                    // Check if the comment body starts with the startToken
                    c.body.startsWith(commentsIdentificationConfig.startToken);
                  
                  return matchingComment
              })

              console.log('The following comments will be deleted:', commentsToDelete)
              
              let counter = 0
              
              for(const commentToDelete of commentsToDelete) {
                counter++
                if (counter > 3) {
                  core.warning('Detected potential malfunction: Deleting an unusual high amount of comments - Aborting')
                  console.log('Aborting comment deletion')
                  break
                }
                
                console.log('Deleting comment with id', commentToDelete.id)

                github.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: commentToDelete.id
                })
              }

              if (!validationResult.valid) {
                console.log('Creating new comment')
                
                github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: 
                    commentsIdentificationConfig.startToken + '\r\n'
                    + '#### Issue-Template Violation\r\n'
                    + 'Thank you for reporting an issue.\r\n'
                    + 'However this issue violates a [template](' + config.templateBaseLink + '). '
                    + 'If this is not fixed, it may get closed without further review!\r\n'
                    + 'Please fix the following validation errors:\r\n'
                    + validationResult.failedChecks.map(c => '* ' + c.errorMsg).join('\r\n')
                })
              }
            }
