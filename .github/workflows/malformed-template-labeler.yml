name: Malformed issue template labeler

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
    
jobs:
  check-issue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v4
        timeout-minutes: 3
        with:
          script: |
            console.log(context)
            console.log(context.payload.issue.labels)
            
            const config = {
              labelsToCheck: ['bug', 'enhancement', 'question'],
              labelsToIgnore: ['force-ignore-template'],
              labelViolation: 'template-ignored',
              checks: [
                {
                  log: 'checklist-section exists',
                  action: () => context.payload.issue.body && context.payload.issue.body.includes('### Checklist'),
                  errorMsg: 'Issue does not contain a checklist (body does not contain "### Checklist")'
                }
              ],
              commentsIdentification: {
                startToken: '<!-- Do not change! MalformedIssueTemplate identifier -->',
                userLogins: [ 'github-actions[bot]' ],
                ignoreCommentsOlderThanDays: 60
              }
            }
                        
            const issueLabels = context.payload.issue.labels.map(i => i.name)
            const issueBody = context.payload.issue.body
            
            console.log('--- Issue Info ---')
            console.log('Labels', issueLabels)
            console.log('Body', issueBody)
            console.log('---------')
            
            const validationResult = isIssueValid(issueLabels, config)
            
            console.log('*** Manage label ***')
            manageLabel(config, validationResult)
            
            console.log('*** Manage comments ***')
            manageComments(config.commentsIdentification, validationResult)
            

            function isIssueValid(issueLabels, config) {
            
              console.log('Checking if the issue can be ignored, specified by using the labels', config.labelsToIgnore)

              if (config.labelsToIgnore.some(label => issueLabels.includes(label))) {
                console.log('Issue has a label that it should be ignored');
                
                return { valid: true }
              }
              
              console.log('Will check for the following labels', config.labelsToCheck)

              if (!config.labelsToCheck.some(label => issueLabels.includes(label))) {
                console.log('Issue does not match any label; ignoring it');

                return { valid: true }
              }

              console.log('Issue should be processed')

              console.log('Performing checks...')
              
              let failedChecks = []

              for(const check of config.checks) {

                console.log('Checking if ' + check.log + '...')

                if(!check.action()) {
                  console.log('FAILED')
                  
                  failedChecks.push(check)
                } else {
                  console.log('OK')
                }

              }
              
              return { 
                valid: failedChecks.length == 0,
                failedChecks: failedChecks
              }
            }
            
            
            
            function manageLabel(config, validationResult) {
              if(validationResult.valid) {
                console.log('Removing label')

                github.issues.removeLabel({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: config.labelViolation
                  })

              } else {
                if(!issueLabels.includes(config.labelViolation)) {
                  console.log('Adding label')

                  github.issues.addLabels({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    labels: [ config.labelViolation ]
                  })
                } else {
                  console.log('Label already exists')
                }
              }
            }
            
            
            
            async function manageComments(commentsIdentificationConfig, validationResult) {
              console.log('Trying to remove the same existing comments')
              
              let since_date = new Date()
              since_date.setDate(new Date().getDate() - commentsIdentificationConfig.ignoreCommentsOlderThanDays)
              
              const comments_payload = await github.issues.listComments({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  since: since_date.toISOString()
                })
              const commentsToDelete = comments_payload.data.filter(c => {
                  return 
                    // Check if the user who commented is the expected one
                    commentsIdentificationConfig.userLogins.includes(c.user.login) &&
                    // Check if the comment body starts with the startToken
                    c.body.startsWith(commentsIdentificationConfig.startToken)
              })

              console.log('The following comments will be deleted:', commentsToDelete)

              for(const commentToDelete of commentsToDelete) {
                console.log('Deleting comment with id', commentToDelete.id)

                github.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: commentToDelete.id
                })
              }

              if (!validationResult.valid) {
                console.log('Creating new comment')

                github.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: 
                    commentsIdentificationConfig.startToken + '\r\n'
                    + '#### Issue-Template Violation\r\n'
                    + 'Thanks for reporting this issue.\r\n'
                    + 'However this issue violates the template. If this is not fixed within X days, it may get closed without further review!\r\n'
                    + 'Please fix the following validation errors:\r\n'
                    + validationResult.failedChecks.map(c => '* ' + c.errorMsg).join('\r\n')
                })
              }
            }
            
