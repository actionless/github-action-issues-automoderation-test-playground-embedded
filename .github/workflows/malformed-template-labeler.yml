name: Malformed issue template labeler

on:
  issues:
    types: [opened, edited, labeled, unlabeled]
    
jobs:
  check-issue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v4
        timeout-minutes: 3
        with:
          script: |
            console.log(context)
            console.log(context.payload.issue.labels)
            
            const config = { 
              labelsToCheck: ['bug', 'enhancement', 'question'],
              labelsToIgnore: ['force-ignore-template'],
              labelViolation: 'template-ignored',
              checks: [
                {
                  log: 'checklist-section exists',
                  action: () => context.payload.issue.body && context.payload.issue.body.includes('### Checklist'),
                  errorMsg: 'Issue does not contain a checklist (body does not contain '### Checklist')'
                }
              ]
            }
                        
            const issueLabels = context.payload.issue.labels.map(i => i.name)
            const issueBody = context.payload.issue.body
            
            console.log('--- Issue Info ---')
            console.log('Labels', issueLabels)
            console.log('Body', issueBody)
            console.log('---------')
            
            const validationResult = isIssueValid(issueLabels, config)
            
            echo('*** Manage label ***')
            if(validationResult.valid) {
              console.log('Removing label')
              
              github.issues.removeLabel({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: config.labelViolation
                })
              
            } else {
              console.log('Issue violates template!')
              
              if(!issueLabels.includes(labelViolation)) {
                console.log('Adding label')
              
                github.issues.addLabels({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: [ config.labelViolation ]
                })
              } else {
                console.log('Label already exists')
              }
            }
            
            echo('*** Manage comment ***')
            if (validationResult.valid) {
              // Try to remove all comments from us
            } else {
              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 
                  '#### Issue-Template Check Violation'
                  'Thanks for reporting this issue.\r\n' +
                  'However this issue is invalid as it does not match the template.\r\n' +
                  'The following validation errors got detected:\r\n' +
                  validationResult.failedChecks.map(c => '* ' + c.errorMsg).join('\r\n')
              })
            }
            
            console.log(github.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              }));
            
            

            function isIssueValid(issueLabels, config) {
            
              console.log('Checking if the issue can be ignored, specified by using the labels', config.labelsToIgnore)

              if (config.labelsToIgnore.some(label => issueLabels.includes(label))) {
                console.log('Issue has a label that it should be ignored');
                
                return { valid: true }
              }
              
              console.log('Will check for the following labels', config.labelsToCheck)

              if (!config.labelsToCheck.some(label => issueLabels.includes(label))) {
                console.log('Issue does not match any label; ignoring it');

                return { valid: true }
              }

              console.log('Issue should be processed')

              console.log('Performing checks...')
              
              var failedChecks = []

              for(const check of config.checks) {

                console.log('Checking if ' + check.log + '...')

                if(!check.action()) {
                  console.log('FAILED')
                  
                  failedChecks.push(check)
                } else {
                  console.log('OK')
                }

              }
              
              return { 
                valid: failedChecks.length == 0,
                failedChecks: failedChecks
              }
            }
            
            
            
